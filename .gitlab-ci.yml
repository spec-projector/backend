image: docker:latest

variables:
  DOCKER_TEST_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  DOCKER_CACHE_IMAGE: $CI_REGISTRY_IMAGE:latest
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID
  GIT_STRATEGY: none

stages:
  - build
  - test
  - publish
  - deploy

build:
  stage: build
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $DOCKER_CACHE_IMAGE || true
    - docker build --cache-from $DOCKER_CACHE_IMAGE -t $DOCKER_TEST_IMAGE -t $DOCKER_CACHE_IMAGE --target test -f deploy/Dockerfile .
    - cat deploy/.dockerignore.production >> .dockerignore
    - docker build --cache-from $DOCKER_CACHE_IMAGE -t $DOCKER_IMAGE --target production -f deploy/Dockerfile .
    - docker push $DOCKER_TEST_IMAGE
    - docker push $DOCKER_IMAGE
    - docker push $DOCKER_CACHE_IMAGE

.quality:
  image: $DOCKER_TEST_IMAGE
  stage: test
  script:
    - cd /app
    - export PATH="$PATH:$HOME/.poetry/bin"
    - make check_quality

.test:
  image: $DOCKER_TEST_IMAGE
  stage: test
  variables:
    DJANGO_ENV: test
  services:
    - postgres
  script:
    - cd /app
    - pytest -n auto --dist=loadscope --cov=apps --cov-report=html:coverage_html
    - mkdir $CI_PROJECT_DIR/coverage
    - coverage report -m > $CI_PROJECT_DIR/coverage/report.log
    - cat $CI_PROJECT_DIR/coverage/report.log | tail -n 1
    - mv coverage_html $CI_PROJECT_DIR/coverage/html
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    paths:
      - coverage

publish_master:
  stage: publish
  dependencies: []
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $DOCKER_IMAGE
    - docker tag $DOCKER_IMAGE $CI_REGISTRY_IMAGE:dev
    - docker push $CI_REGISTRY_IMAGE:dev
  only:
    - master

deploy_master:
  image: junte/helm-deploy:1.2-helm2.16.1
  stage: deploy
  dependencies: []
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
    K8S_URL: $K8S_URL
    K8S_TOKEN: $K8S_TOKEN
    HELM_RELEASE: spec-projector--backend
    HELM_IMAGE_TAG: $CI_PIPELINE_IID
    HELM_OVERRIDES: $K8S_HELM_OVERRIDES
    HELM_NAMESPACE: $K8S_NAMESPACE
    HELM_CHART_PATH: deploy/helm
  script:
    - echo $K8S_HELM_OVERRIDES
    - echo $HELM_OVERRIDES
    - ls -l /builds/junte/spec-projector/backend.tmp/
    - _HELM_OPTS="--set image.tag=$HELM_IMAGE_TAG"
    - if [ "${HELM_OVERRIDES}" ]; then _HELM_OPTS="${_HELM_OPTS} -f ${HELM_OVERRIDES}"; fi
    - if [ "${HELM_NAMESPACE}" ]; then _HELM_OPTS="${_HELM_OPTS} --namespace ${HELM_NAMESPACE}"; fi
    - echo $_HELM_OPTS
    - helm_deploy
  environment:
    name: production
    url: $SITE_ADDRESS
  only:
    - master
