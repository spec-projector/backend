schema {
  query: Query
  mutation: Mutation
}

type Assignee {
  name: String
  avatar: String
}

scalar BitField

input ChangePasswordInput {
  password: String!
}

type ChangePasswordMutation {
  ok: Boolean
}

input ChangeSubscriptionInput {
  tariff: ID!
  hash: String!
}

type ChangeSubscriptionMutation {
  request: ChangeSubscriptionRequest
}

type ChangeSubscriptionRequest implements ModelRelayNode {
  id: ID!
  createdAt: DateTime!
  isActive: Boolean!
  tariff: Tariff!
  status: SubscriptionStatus!
}

input CreateProjectAssetInput {
  project: ID!
  url: String!
}

type CreateProjectAssetMutation {
  projectAsset: ProjectAsset
}

input CreateProjectInput {
  title: String!
  isPublic: Boolean
  description: String
  figmaIntegration: UpdateFigmaIntegrationType
  githubIntegration: UpdateGitHubIntegrationType
  gitlabIntegration: UpdateGitLabIntegrationType
}

type CreateProjectMutation {
  project: Project
}

scalar DateTime

type DeleteProjectMutation {
  status: String
}

type DjangoDebug {
  sql: [DjangoDebugSQL]
}

type DjangoDebugSQL {
  vendor: String!
  alias: String!
  sql: String
  duration: Float!
  rawSql: String!
  params: String!
  startTime: Float!
  stopTime: Float!
  isSlow: Boolean!
  isSelect: Boolean!
  transId: String
  transStatus: String
  isoLevel: String
  encoding: String
}

type FigmaIntegration {
  token: String!
}

type GitHubIntegration {
  token: String!
}

type GitLabIntegration {
  token: String!
}

type Issue {
  title: String
  state: String
  dueDate: String
  spent: Float
  assignee: Assignee
}

input IssueInput {
  project: ID!
  url: String!
  system: IssuesManagementSystem!
}

enum IssuesManagementSystem {
  GITHUB
  GITLAB
  DUMMY
}

input LoginInput {
  email: String!
  password: String!
}

type LoginMutation {
  token: Token
}

type LogoutMutation {
  status: String
}

type MeUserType {
  id: ID
  firstName: String
  lastName: String
  email: String
  isStaff: Boolean
  isActive: Boolean
  avatar: String
  lastLogin: DateTime
  subscription: Subscription
  changeSubscriptionRequest: ChangeSubscriptionRequest
}

interface ModelRelayNode {
  id: ID!
}

type Mutation {
  changeSubscription(input: ChangeSubscriptionInput!): ChangeSubscriptionMutation
  socialLogin(system: SystemBackend!): SocialLoginMutation
  socialLoginComplete(code: String!, state: String!, system: SystemBackend!): SocialLoginCompleteMutation
  login(input: LoginInput!): LoginMutation
  logout: LogoutMutation
  register(input: RegisterInput!): RegisterMutation
  resetPassword(input: ResetPasswordInput!): ResetPasswordMutation
  sendPasswordResetSecurityCode(input: SendPasswordResetSecurityCodeInput!): SendPasswordResetSecurityCodeMutation
  changePassword(input: ChangePasswordInput!): ChangePasswordMutation
  updateMe(input: UpdateMeInput!): UpdateMeMutation
  uploadUserAvatar(input: UploadUserAvatarInput!): UploadUserAvatarMutation
  uploadFigmaAsset(input: CreateProjectAssetInput!): CreateProjectAssetMutation
  createProject(input: CreateProjectInput): CreateProjectMutation
  updateProject(id: ID!, input: UpdateProjectInput): UpdateProjectMutation
  deleteProject(project: ID!): DeleteProjectMutation
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project implements ModelRelayNode {
  id: ID!
  isPublic: Boolean
  title: String
  description: String
  dbName: String
  owner: User
  members: [ProjectMember]
  createdAt: DateTime
  updatedAt: DateTime
  figmaIntegration: FigmaIntegration
  githubIntegration: GitHubIntegration
  gitlabIntegration: GitLabIntegration
}

type ProjectAsset {
  project: Project
  file: String
  source: String
  fileUrl: String
}

type ProjectMember implements ModelRelayNode {
  id: ID!
  roles: BitField
  user: User
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectMemberInput {
  id: ID!
  roles: BitField!
}

enum ProjectSort {
  CREATED_AT_ASC
  CREATED_AT_DESC
}

type ProjectTypeConnection {
  pageInfo: PageInfo!
  edges: [ProjectTypeEdge]!
  count: Int
}

type ProjectTypeEdge {
  node: Project
  cursor: String!
}

type Query {
  tariff(id: ID!): Tariff
  allTariffs(offset: Int, sort: [TariffSort], before: String, after: String, first: Int, last: Int): TariffTypeConnection
  user(id: ID!): User
  me: MeUserType
  allUsers(email: String, offset: Int, sort: [UserSort], before: String, after: String, first: Int, last: Int): UserTypeConnection
  project(id: ID!): Project
  allProjects(title: String, offset: Int, sort: [ProjectSort], before: String, after: String, first: Int, last: Int): ProjectTypeConnection
  issue(input: IssueInput!): Issue
  _debug: DjangoDebug
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

type RegisterMutation {
  token: Token
}

input ResetPasswordInput {
  email: String!
  code: String!
  password: String!
}

type ResetPasswordMutation {
  token: Token
}

input SendPasswordResetSecurityCodeInput {
  email: String!
}

type SendPasswordResetSecurityCodeMutation {
  ok: Boolean
}

type SocialLoginCompleteMutation {
  token: Token
}

type SocialLoginMutation {
  redirectUrl: String
}

type Subscription implements ModelRelayNode {
  id: ID!
  createdAt: DateTime!
  tariff: Tariff!
  activeUntil: DateTime
  status: SubscriptionStatus!
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  REJECTED
  EXPIRED
}

enum SystemBackend {
  GITLAB
  GOOGLE
}

type Tariff implements ModelRelayNode {
  id: ID!
  order: Int
  code: String
  title: String
  teaser: String
  icon: String
  price: Float
  isActive: Boolean
  features: BitField
  maxProjects: Int
  maxProjectMembers: Int
}

enum TariffSort {
  ORDER_ASC
  ORDER_DESC
}

type TariffTypeConnection {
  pageInfo: PageInfo!
  edges: [TariffTypeEdge]!
  count: Int
}

type TariffTypeEdge {
  node: Tariff
  cursor: String!
}

type Token implements ModelRelayNode {
  id: ID!
  user: User
  key: String
  created: DateTime
}

input UpdateFigmaIntegrationType {
  token: String
}

input UpdateGitHubIntegrationType {
  token: String
}

input UpdateGitLabIntegrationType {
  token: String
}

input UpdateMeInput {
  firstName: String
  lastName: String
}

type UpdateMeMutation {
  me: User
}

input UpdateProjectInput {
  title: String
  isPublic: Boolean
  description: String
  figmaIntegration: UpdateFigmaIntegrationType
  githubIntegration: UpdateGitHubIntegrationType
  gitlabIntegration: UpdateGitLabIntegrationType
  users: [ProjectMemberInput]
}

type UpdateProjectMutation {
  project: Project
}

scalar Upload

input UploadUserAvatarInput {
  user: Int!
  file: Upload!
  left: Int!
  top: Int!
  width: Int!
  height: Int!
  scale: Float!
}

type UploadUserAvatarMutation {
  user: User
}

type User implements ModelRelayNode {
  id: ID!
  firstName: String
  lastName: String
  email: String
  isStaff: Boolean
  isActive: Boolean
  avatar: String
  lastLogin: DateTime
}

enum UserSort {
  EMAIL_ASC
  EMAIL_DESC
}

type UserTypeConnection {
  pageInfo: PageInfo!
  edges: [UserTypeEdge]!
  count: Int
}

type UserTypeEdge {
  node: User
  cursor: String!
}
